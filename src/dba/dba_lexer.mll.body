  | "while"                   { WHILE }
  | "do"                      { DO }
  | "for"                     { FOR }
  | "in"                      { IN }
  | "to"                      { TO }
  | "case"                    { CASE }
  | "is"                      { IS }
  | "as"                      { AS }
  | ";"                       { SEMICOLON }
  | "end"                     { END }
  | "assert"                  { ASSERT }
  | "assume"                  { ASSUME }
  | ":="                      { ASSIGN }
  | "goto"                    { GOTO }
  | "jump"                    { JUMP }
  | "undef"                   { UNDEF }
  | "nondet"                  { NONDET }
  | "@"                       { AT }
  | "if"                      { IF }
  | "then"                    { THEN }
  | "else"                    { ELSE }
  | "+"                       { PLUS }
  | "-"                       { MINUS }
  | "*"                       { MUL }
  | '/' 'u'?                  { UDIV }
  | "/s"                      { SDIV }
  | '%' 'u'?                  { UMOD }
  | "%s"                      { SMOD }
  | "="                       { EQUAL }
  | "<>"                      { DIFF }
  | "<=" 'u'?                 { ULE }
  | '<' 'u'?                  { ULT }
  | ">=" 'u'?                 { UGE }
  | '>' 'u'?                  { UGT }
  | "<=s"                     { SLE }
  | "<s"                      { SLT }
  | ">=s"                     { SGE }
  | ">s"                      { SGT }
  | "~"
  | "!"                       { NOT }
  | "&"                       { AND }
  | "|"                       { OR }
  | "^"                       { XOR }
  | "lsl"                     { LSL }
  | "lsr"                     { LSR }
  | "asr"                     { ASR }
  | "rol"                     { ROL }
  | "ror"                     { ROR }
  | "::"                      { CONCAT }
  | "&&"                      { LAND }
  | "||"                      { LOR }
  | "@["                      { LMEM }
  | "]"                       { RMEM }
  | "<-"                      { LARROW }
  | "->"                      { RARROW }
  | "("                       { LPAR }
  | ")"                       { RPAR }
  | "?"                       { QMARK }
  | ":"                       { COLON }
  | ","                       { COMMA }
  | "_"                       { ANY }
  | "uext" (digit+ as s)
    	   { ZEXT (int_of_string s) }
  | "sext" (digit+ as s)
    	   { SEXT (int_of_string s) }
  | '.' (ident as s)
    	   { LABEL s }
  | (ident as s) '<' (digit+ as i) '>'
    	   { IDENT (s, int_of_string i) }
  | ident as s
    	   { IDENT (s, -1) }
  | '-'? digit+ as s
    	   { INT (int_of_string s) }
  | '{' space* (digit+ as hi) space* ".." space* (digit+ as lo) '}'
    	   { RANGE { Interval.hi=int_of_string hi; lo=int_of_string lo } }
  | bin | hex as s
           { CONST (Bitvector.of_string s) }
  | '"' ([^'"']* as s) '"'
           { let s = Scanf.unescaped s in
	     CONST (Bitvector.create (Z.of_bits s) (String.length s * 8)) }
  | '"' ([^'"']* as s) '"' 'z'
           { let s = Scanf.unescaped s in
	     CONST (Bitvector.create (Z.of_bits s)
	     	   ((String.length s + 1) * 8)) }
  | space+          { token lexbuf }
  | '#' [^'\n']* '\n'
  | "\n"            { Lexing.new_line lexbuf; token lexbuf }
  | eof             { EOF }
  | _
      {
        let open Lexing in
        let line = (lexeme_start_p lexbuf).pos_lnum in
        let msg =
          Format.asprintf "Unkown lexeme %s at line %d" (lexeme lexbuf) line in
        failwith msg }